from typing import List
import math

def is_prime(n: int, cache={}) -> bool:
    if n in cache:
        return cache[n]
    if n < 2:
        cache[n] = False
        return False
    if n == 2:
        cache[n] = True
        return True
    if n % 2 == 0:
        cache[n] = False
        return False
    for i in range(3, int(math.isqrt(n)) + 1, 2):
        if n % i == 0:
            cache[n] = False
            return False
    cache[n] = True
    return True

def count_prime_islands(grid: List[List[int]]) -> int:
    if not grid or not grid[0]:
        return 0
    
    rows, cols = len(grid), len(grid[0])
    visited = [[False]*cols for _ in range(rows)]
    directions = [(-1,0), (1,0), (0,-1), (0,1)]
    
    def dfs_stack(r, c):
        stack = [(r, c)]
        while stack:
            x, y = stack.pop()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if (
                    0 <= nx < rows and
                    0 <= ny < cols and
                    not visited[nx][ny] and
                    is_prime(grid[nx][ny])
                ):
                    visited[nx][ny] = True
                    stack.append((nx, ny))

    island_count = 0
    for i in range(rows):
        for j in range(cols):
            if not visited[i][j] and is_prime(grid[i][j]):
                visited[i][j] = True
                dfs_stack(i, j)
                island_count += 1

    return island_count
